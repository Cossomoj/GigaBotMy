import requests
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ –¢–≤–æ–π API-—Ç–æ–∫–µ–Ω –æ—Ç BotFather
TELEGRAM_BOT_TOKEN = "7302486009:AAEjvjmgyeqFU2Hd_KgL5SgHmwAtKL0O1Q0"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat API
GIGACHAT_AUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
GIGACHAT_CHAT_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
GIGACHAT_SCOPE = "GIGACHAT_API_PERS"

# üîπ –¢–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GigaChat (–∑–∞–º–µ–Ω–∏–ª `Basic Auth` –Ω–∞ `client_id` –∏ `client_secret`)
CLIENT_ID = "754f0677-b9f8-43e1-a15d-6d0521285c77"
CLIENT_SECRET = "fe13bda3-7638-4a1e-a869-070df5561826"
VERIFY_SSL_CERTS = False  # ‚ùó –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–ª—É—á—à–µ –≤–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)


def get_gigachat_token():
    """‚úÖ –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π Access Token –¥–ª—è GigaChat —á–µ—Ä–µ–∑ client_id –∏ client_secret"""
    data = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": GIGACHAT_SCOPE
    }

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json"
    }

    try:
        response = requests.post(GIGACHAT_AUTH_URL, headers=headers, data=data, verify=VERIFY_SSL_CERTS)
        response.raise_for_status()
        access_token = response.json().get("access_token")
        logging.info("[GigaChat] ‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        return access_token
    except requests.exceptions.RequestException as e:
        logging.error(f"[GigaChat Error] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


async def ask_gigachat(prompt, user_id):
    """‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ GigaChat-Max"""
    access_token = get_gigachat_token()
    if not access_token:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat."

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "GigaChat-Max",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    logging.info(f"[GigaChat Request] User {user_id}: {prompt}")

    try:
        response = requests.post(GIGACHAT_CHAT_URL, json=data, headers=headers, verify=VERIFY_SSL_CERTS)
        response.raise_for_status()
        response_data = response.json()
        response_text = response_data.get("choices", [{}])[0].get("message", {}).get("content",
                                                                                     "–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ GigaChat")
        logging.info(f"[GigaChat Response] User {user_id}: {response_text}")
        return response_text
    except requests.exceptions.RequestException as e:
        logging.error(f"[GigaChat Error] {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GigaChat."


async def start(update: Update, context):
    """‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é GigaChat-Max.")


async def handle_message(update: Update, context):
    """‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    user_id = update.message.chat.id
    response = await ask_gigachat(user_text, user_id)
    await update.message.reply_text(response)


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
